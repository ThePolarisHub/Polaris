# Profile Setup Feature – Step-by-Step TODO List

Below is a structured list of tasks needed to implement the new profile setup feature, with recommended Git commands along the way. Check off each item as you complete it!

> **Tip**: Before starting, create a dedicated branch for this feature:
>
> ```bash
> git checkout -b feature/profile-setup
> ```

---

## 1. Database & Schema Preparations

1. **Finalize Database Schema**  
   - [ ] Create a `profiles` table with columns:  
     - `id` (PK, references `auth.users.id`)  
     - `email` (text, mirrored from `auth.users.email`)  
     - `display_name` (text, mirrored from `auth.users.display_name`)  
     - `avatar_url` (text)  
     - Timestamps (`created_at`, `updated_at`)  
   - [ ] Ensure any restricted columns (e.g., `email`) are not directly updatable by the user.

   > **Git Commands**  
   > 1. Create/modify the migration file for your `profiles` table.  
   > 2. Add/commit changes:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: add profiles table schema"
   >    git push -u origin feature/profile-setup
   >    ```

2. **Create Postgres Triggers to Mirror Data**  
   - [ ] On `INSERT` in `auth.users`, auto-create a corresponding row in `profiles`.  
   - [ ] On `UPDATE` in `auth.users`, update `email` and `display_name` in `profiles`.  
   - [ ] Test syncing by updating `auth.users` records and verifying `profiles` updates.

   > **Git Commands**  
   > 1. Add the trigger logic to your migration or a separate SQL file.  
   > 2. Commit the changes:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: create triggers for syncing auth.users to profiles"
   >    git push
   >    ```

3. **Row-Level Security (RLS) Policies**  
   - [ ] Enable RLS on the `profiles` table.  
   - [ ] Create a policy allowing each user to `SELECT`/`UPDATE` their own row only.  
   - [ ] Disallow `INSERT` unless done by the trigger or a trusted role.

   > **Git Commands**  
   > 1. Update your SQL migration or add a new migration for RLS policies.  
   > 2. Commit and push:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: enable RLS and set policies for profiles"
   >    git push
   >    ```

4. **Migrations & Tooling Setup**  
   - [ ] Use the Supabase CLI (or similar) to generate and run the migration script locally.  
   - [ ] Confirm local migrations run successfully.  
   - [ ] Plan how to apply the same migration in production (if relevant now or in the future).

   > **Git Commands**  
   > 1. If you made changes to your migration scripts or Docker configs, commit them:  
   >    ```bash
   >    git add .
   >    git commit -m "chore: finalize migrations and tooling"
   >    git push
   >    ```

---


## 2. Next.js & Client-Side Implementation

1. **Create `/setup` Page**  
   - [ ] Single-page form with fields:
     - `display_name`
     - Avatar upload (file input + preview)  
   - [ ] Style with Tailwind + Shadcn UI components.  
   - [ ] Handle loading and error states.

   > **Git Commands**  
   > 1. Generate the `/setup` page in the `app` directory or wherever your routes are.  
   > 2. Commit:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: add profile setup page with form"
   >    git push
   >    ```

2. **Middleware & Redirect Logic**  
   - [ ] Add middleware that checks if `display_name` is set.  
   - [ ] If missing, redirect to `/setup`.  
   - [ ] Otherwise, continue to the dashboard.

   > **Git Commands**  
   > 1. Add/update your middleware file in Next.js.  
   > 2. Commit:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: add middleware to redirect if display_name is missing"
   >    git push
   >    ```

3. **Cache & Revalidation**  
   - [ ] Use Next.js 15 `App Router` or SWR/React Query to fetch the user’s profile.  
   - [ ] Revalidate (invalidate cache) after successful updates.

   > **Git Commands**  
   > 1. Implement caching logic and revalidation triggers.  
   > 2. Commit:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: implement cache and revalidation for user profile"
   >    git push
   >    ```

4. **Server Actions**  
   - [ ] Create actions for updating display name and avatar.  
   - [ ] Ensure user can only update their own record (validate user ID).  
   - [ ] Invalidate cache after the action completes.

   > **Git Commands**  
   > 1. Add server action files/functions.  
   > 2. Commit changes:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: server actions for profile updates"
   >    git push
   >    ```

5. **Error Handling & User Feedback**  
   - [ ] Show inline or toast notifications if server actions fail.  
   - [ ] Provide real-time feedback (e.g., uploading spinner, success message).

   > **Git Commands**  
   > 1. Update UI to handle errors gracefully.  
   > 2. Commit and push:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: enhanced error handling and user feedback"
   >    git push
   >    ```

---

## 3. File Upload & Image Processing

1. **File Validation & Error Messages**  
   - [ ] On the client side, allow only JPG, JPEG, PNG, or SVG.  
   - [ ] Enforce a max file size of **5MB**.  
   - [ ] Provide clear error messages for invalid file type or size.

   > **Git Commands**  
   > 1. Update or create the client-side form logic for file validation.  
   > 2. Commit the changes:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: validate avatar file types and size on client"
   >    git push
   >    ```

2. **Sharp Image Processing**  
   - [ ] Install and configure [Sharp](https://www.npmjs.com/package/sharp).  
   - [ ] Resize images to an optimal size before uploading.  
   - [ ] Consider storing one optimized image (rather than multiple sizes).

   > **Git Commands**  
   > 1. Install Sharp and configure server-side logic.  
   > 2. Commit the changes:  
   >    ```bash
   >    git add package.json package-lock.json
   >    git commit -m "feat: add Sharp for image processing"
   >    git push
   >    ```

3. **Upload Flow to Supabase Storage**  
   - [ ] Create a server action to:
     1. Receive the file  
     2. Validate it  
     3. Process it with Sharp  
     4. Upload to Supabase storage  
     5. Return the public URL  
   - [ ] Update `profiles.avatar_url` with the returned URL.

   > **Git Commands**  
   > 1. Implement the server action and update your Next.js or utility files.  
   > 2. Commit:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: server action for avatar upload and processing"
   >    git push
   >    ```

4. **Fallback Avatars & Display**  
   - [ ] Use Shadcn UI’s `<Avatar>` component.  
   - [ ] Display a placeholder or initials if `avatar_url` is empty or invalid.

   > **Git Commands**  
   > 1. Update UI components to show fallback avatar.  
   > 2. Commit the changes:  
   >    ```bash
   >    git add .
   >    git commit -m "feat: add fallback avatars with Shadcn UI"
   >    git push
   >    ```

---

## 4. Permissions & Security Audits

1. **Supabase Policies Testing**  
   - [ ] Attempt to query or update another user’s profile to ensure it’s disallowed.  
   - [ ] Confirm auto-creation of `profiles` on sign-up.  
   - [ ] Verify triggers sync changes from `auth.users` correctly.

   > **Git Commands**  
   > 1. If you update any policy or fix anything discovered during testing, commit again:  
   >    ```bash
   >    git add .
   >    git commit -m "fix: update RLS policies after testing"
   >    git push
   >    ```

2. **JWT/Session Validation**  
   - [ ] Ensure your Next.js app is passing user credentials (JWT) correctly to Supabase for RLS.

   > **Git Commands**  
   > 1. Commit any updates to authentication logic or environment configs.  
   >    ```bash
   >    git add .
   >    git commit -m "chore: ensure JWT/Session validation for RLS"
   >    git push
   >    ```

3. *(Optional)* **Rate Limiting**  
   - [ ] If you anticipate abuse, add rate limiting for avatar uploads (out of scope for now).

---

## 6. Testing & Verification (Even Without Formal Tests)

1. **Manual Testing**  
   - [ ] Sign up a new user, confirm `profiles` row is created.  
   - [ ] Update user’s email in `auth.users` to see if `profiles` matches.  
   - [ ] Upload various file types (valid/invalid) to confirm validations work.

   > **Git Commands**  
   > 1. If you find and fix bugs during manual testing, commit again with details.  
   >    ```bash
   >    git add .
   >    git commit -m "fix: address bug found in manual testing"
   >    git push
   >    ```

2. **Security Review**  
   - [ ] Double-check that RLS rules block all unauthorized access.  
   - [ ] Verify server actions reject changes to restricted columns.

3. **Performance Checks**  
   - [ ] Check the speed of Sharp processing on typical file sizes.  
   - [ ] Confirm caching logic works (reduce unnecessary fetches).

---

## Final Step: Merge Into Main (or Production Branch)

- [ ] After successful tests, create a Pull Request (PR) from `feature/profile-setup` into `main` (or your default branch).
- [ ] Request review from team members or self-review if you’re solo.
- [ ] Once approved, **merge** the PR.
- [ ] Tag a release if desired.

> **Git Commands**  
> 1. When everything is ready, push your final commits:  
>    ```bash
>    git push
>    ```
> 2. Open a PR from your `feature/profile-setup` branch to `main`.
> 3. After approval, merge it, then optionally delete the feature branch:
>    ```bash
>    git checkout main
>    git pull
>    git branch -d feature/profile-setup
>    ```

**Happy Building!**  
Once each item is completed and checked off, you’ll have a robust and secure onboarding/profile setup flow. 
